#include <stdio.h>
#include <stdlib.h>
#include <math.h>
int isPrime(int n) {
    if (n <= 1)
        return 0;
    for (int i = 2; i <= sqrt(n); i++) {
        if (n % i == 0)
            return 0;
    }
    return 1;
}
int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}
int modInverse(int a, int m) {
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1)
            return x;
    }
    return -1;
}
void generateKeys(int p, int q, int *n, int *e, int *d) {
    *n = p * q;
    int phi = (p - 1) * (q - 1);

    *e = 7; // Starting with e = 2
    while (gcd(*e, phi) != 1) {
        (*e)++;
    }
    *d = modInverse(*e, phi);
}
int encrypt(int plaintext, int e, int n) {
    return fmod(pow(plaintext, e), n);
}
int decrypt(int ciphertext, int d, int n) {
    return fmod(pow(ciphertext, d), n);
}
int main() {
    int p = 11;
    int q = 6;
    int n, e, d;
    generateKeys(p, q, &n, &e, &d);
    printf("Public Key (n, e): (%d, %d)\n", n, e);
    printf("Private Key (n, d): (%d, %d)\n", n, d);
    int plaintext = 4;
    int ciphertext = encrypt(plaintext, e, n);
    printf("Ciphertext: %d\n", ciphertext);

    int decryptedText = decrypt(ciphertext, d, n);
    printf("Decrypted Text: %d\n", decryptedText);

    return 0;}
