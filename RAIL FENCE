#include <stdio.h>
#include <string.h>

void encryptRailFence(char *text, int rails, char *encryptedText) {
    int textLength = strlen(text);
    int railLength = 2 * (rails - 1);
    int encryptedIndex = 0;

    for (int i = 0; i < rails; i++) {
        for (int j = i; j < textLength; j += railLength) {
            encryptedText[encryptedIndex++] = text[j];
            if (i != 0 && i != rails - 1) {
                int secondJ = j + railLength - 2 * i;
                if (secondJ < textLength)
                    encryptedText[encryptedIndex++] = text[secondJ];
            }
        }
    }
    encryptedText[encryptedIndex] = '\0';
}

void decryptRailFence(char *encryptedText, int rails, char *decryptedText) {
    int textLength = strlen(encryptedText);
    int railLength = 2 * (rails - 1);
    int decryptedIndex = 0;
    int cycle = 2 * (rails - 1);

    for (int i = 0; i < rails; i++) {
        int interval = cycle - 2 * i;
        for (int j = i; j < textLength; j += cycle) {
            decryptedText[j] = encryptedText[decryptedIndex++];
            if (interval < cycle && interval > 0 && j + interval < textLength)
                decryptedText[j + interval] = encryptedText[decryptedIndex++];
        }
    }
    decryptedText[textLength] = '\0';
}

int main() {
    char text[] = "HELLO WORLD";
    int rails = 3;
    char encryptedText[strlen(text) + 1];
    char decryptedText[strlen(text) + 1];

    encryptRailFence(text, rails, encryptedText);
    printf("Encrypted Text: %s\n", encryptedText);

    decryptRailFence(encryptedText, rails, decryptedText);
    printf("Decrypted Text: %s\n", decryptedText);

    return 0;
}
